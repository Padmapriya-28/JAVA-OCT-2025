**1.LC_2651(Calculate Delayed Arrival Time)**
class Solution {
    public int findDelayedArrivalTime(int arrivalTime, int delayedTime) {
        return(arrivalTime+delayedTime)%24;
    }
}

**2. LC_2485(Find the Pivot Integer)**
class Solution {
    public int pivotInteger(int n) {
        long t = (long) n * (n + 1) / 2; // may need long to avoid overflow
        long r = (long) Math.sqrt(t);
        if (r * r == t) return (int) r;
        return -1;
    }
}

**3.LC_2600(K Items With the Maximum Sum)**
class Solution {
    public int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {
        if (k <= numOnes) return k;                  
        if (k <= numOnes + numZeros) return numOnes; 
        return numOnes - (k - numOnes - numZeros);
    }
}

**4. LC_2549(Count Distinct Numbers on Board**
class Solution {
    public int distinctIntegers(int n) {
        if(n==1) return 1;
        return n-1;
    }
}

**5. LC_2769(Find the Maximum Achievable Number)**
class Solution {
    public int theMaximumAchievableX(int num, int t) {
        return num+2*t;
    }
}

**6.LC_2806(Account Balance After Rounded Purchase)**
class Solution {
    public int accountBalanceAfterPurchase(int purchaseAmount) {
        int roundedAmount = ((purchaseAmount + 5) / 10) * 10;
        return 100 - roundedAmount;
    }
}

**7. LC_2582(Pass the Pillow)**
class Solution {
    public int passThePillow(int n, int time) {
        int cycle = 2 * (n - 1);
        int t = time % cycle;
        int position = 1;
        int direction = 1;
        for (int i = 0; i < t; i++) {
            if (position == n) direction = -1;
            if (position == 1) direction = 1;
            position += direction;
        }
        return position;
    }
}
